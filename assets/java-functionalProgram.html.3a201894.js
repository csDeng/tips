import{_ as n,e as s}from"./app.2a7ffa2e.js";const a={},p=s(`<h1 id="java-\u51FD\u6570\u5F0F\u7F16\u7A0B" tabindex="-1"><a class="header-anchor" href="#java-\u51FD\u6570\u5F0F\u7F16\u7A0B" aria-hidden="true">#</a> Java \u51FD\u6570\u5F0F\u7F16\u7A0B</h1><p>Java\u51FD\u6570\u5F0F\u7F16\u7A0B\uFF0C\u662F\u4E00\u79CD\u5F3A\u5927\u7684\u7F16\u7A0B\u8303\u5F0F\uFF0C\u80FD\u591F\u8BA9\u4F60\u7684\u4EE3\u7801\u66F4\u52A0\u7B80\u6D01\uFF0C\u4F18\u96C5\u3002Java 8 \u5F15\u5165\u4E86\u51FD\u6570\u5F0F\u7F16\u7A0B\u7684\u652F\u6301\uFF0C\u5176\u4E2DLambda\u8868\u8FBE\u5F0F\u548C\u51FD\u6570\u5F0F\u63A5\u53E3\u662F\u51FD\u6570\u5F0F\u7F16\u7A0B\u7684\u4E24\u4E2A\u91CD\u8981\u6982\u5FF5\u3002\u5728\u672C\u7BC7\u6587\u7AE0\u4E2D\uFF0C\u6211\u4EEC\u5C06\u4F1A\u8BE6\u7EC6\u4ECB\u7ECDJava\u51FD\u6570\u5F0F\u7F16\u7A0B\u4EE5\u53CA\u5E38\u7528\u7684\u51FD\u6570\u5F0F\u63A5\u53E3\u3002</p><h2 id="lambda\u8868\u8FBE\u5F0F" tabindex="-1"><a class="header-anchor" href="#lambda\u8868\u8FBE\u5F0F" aria-hidden="true">#</a> Lambda\u8868\u8FBE\u5F0F</h2><p>Lambda\u8868\u8FBE\u5F0F\u662F\u4E00\u79CD\u533F\u540D\u51FD\u6570\uFF0C\u53EF\u4EE5\u7406\u89E3\u4E3A\u4E00\u6BB5\u53EF\u4EE5\u4F20\u9012\u7684\u4EE3\u7801\u3002\u5728 Java \u4E2D\uFF0CLambda \u8868\u8FBE\u5F0F\u53EF\u4EE5\u66FF\u4EE3\u53EA\u6709\u4E00\u4E2A\u62BD\u8C61\u65B9\u6CD5\u7684\u63A5\u53E3\u3002\u4E0B\u9762\u662F\u4E00\u4E2ALambda\u8868\u8FBE\u5F0F\u7684\u4F8B\u5B50:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u5176\u4E2D\uFF0C\u5DE6\u4FA7\u62EC\u53F7\u5185\u662FLambda\u8868\u8FBE\u5F0F\u7684\u53C2\u6570\u5217\u8868\uFF08\u5982\u679C\u6CA1\u6709\u53C2\u6570\uFF0C\u5219\u4E3A\u7A7A\uFF09\uFF0C\u7BAD\u5934\u201C-&gt;\u201D\u5C06 Lambda \u8868\u8FBE\u5F0F\u7684\u53C2\u6570\u5217\u8868\u548C\u8868\u8FBE\u5F0F\u4E3B\u4F53\u5206\u9694\u5F00\uFF0C\u53F3\u4FA7\u5219\u662FLambda\u8868\u8FBE\u5F0F\u7684\u4E3B\u4F53\uFF08\u4E5F\u5C31\u662FLambda\u8868\u8FBE\u5F0F\u8981\u6267\u884C\u7684\u4EE3\u7801\u5757\uFF09\u3002Lambda\u8868\u8FBE\u5F0F\u662F\u4F7F\u7528\u7F16\u5199\u51FD\u6570\u5F0F\u63A5\u53E3\u7684\u7B80\u4FBF\u65B9\u6CD5\u3002</p><h2 id="\u51FD\u6570\u5F0F\u63A5\u53E3" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u5F0F\u63A5\u53E3" aria-hidden="true">#</a> \u51FD\u6570\u5F0F\u63A5\u53E3</h2><p>\u51FD\u6570\u5F0F\u63A5\u53E3\u662F\u6307\u4EC5\u5305\u542B\u4E00\u4E2A\u62BD\u8C61\u65B9\u6CD5\u7684\u63A5\u53E3\u3002\u5728 Java \u4E2D\uFF0C\u51FD\u6570\u5F0F\u63A5\u53E3\u53EF\u4EE5\u4F7F\u7528Lambda\u8868\u8FBE\u5F0F\u6765\u5B9E\u73B0\uFF0C\u4ECE\u800C\u5B9E\u73B0\u51FD\u6570\u5F0F\u7F16\u7A0B\u3002Java\u63D0\u4F9B\u4E86\u4E00\u4E9B\u5E38\u7528\u7684\u51FD\u6570\u5F0F\u63A5\u53E3\uFF0C\u5982Function\u3001Consumer\u3001Predicate\u3001Supplier\u7B49\u3002</p><p>\u6309\u7167\u4E0B\u9762\u7684\u683C\u5F0F\u5B9A\u4E49\uFF0C\u4F60\u4E5F\u80FD\u5199\u51FA\u51FD\u6570\u5F0F\u63A5\u53E3\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token annotation punctuation">@FunctionalInterface</span>
 \u4FEE\u9970\u7B26 <span class="token keyword">interface</span> \u63A5\u53E3\u540D\u79F0 <span class="token punctuation">{</span>
    \u8FD4\u56DE\u503C\u7C7B\u578B \u65B9\u6CD5\u540D\u79F0<span class="token punctuation">(</span>\u53EF\u9009\u53C2\u6570\u4FE1\u606F<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u5176\u4ED6\u975E\u62BD\u8C61\u65B9\u6CD5\u5185\u5BB9</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u867D\u7136<code>@FunctionalInterface</code>\u6CE8\u89E3\u4E0D\u662F\u5FC5\u987B\u7684\uFF0C\u4F46\u662F\u81EA\u5B9A\u4E49\u51FD\u6570\u5F0F\u63A5\u53E3\u6700\u597D\u8FD8\u662F\u90FD\u52A0\u4E0A\uFF0C\u4E00\u662F\u517B\u6210\u826F\u597D\u7684\u7F16\u7A0B\u4E60\u60EF\uFF0C\u4E8C\u662F\u9632\u6B62\u4ED6\u4EBA\u4FEE\u6539\uFF0C\u4E00\u770B\u5230\u8FD9\u4E2A\u6CE8\u89E3\u5C31\u77E5\u9053\u662F\u51FD\u6570\u5F0F\u63A5\u53E3\uFF0C\u907F\u514D\u4ED6\u4EBA\u5F80\u63A5\u53E3\u5185\u6DFB\u52A0\u62BD\u8C61\u65B9\u6CD5\u9020\u6210\u4E0D\u5FC5\u8981\u7684\u9EBB\u70E6\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyFunction</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u4E0A\u9762\u6211\u81EA\u5B9A\u4E49\u7684\u4E00\u4E2A\u51FD\u6570\u5F0F\u63A5\u53E3\uFF0C\u90A3\u4E48\u8FD9\u4E2A\u63A5\u53E3\u7684\u4F5C\u7528\u662F\u4EC0\u4E48\u5462\uFF1F<strong>\u5C31\u662F\u8F93\u51FA\u4E00\u4E32\u5B57\u7B26\u4E32\uFF0C\u5C5E\u4E8E\u6D88\u8D39\u578B\u63A5\u53E3\uFF0C\u662F\u6A21\u4EFFConsumer\u63A5\u53E3\u5199\u7684</strong>\uFF0C\u53EA\u4E0D\u8FC7\u8FD9\u4E2A\u6CA1\u6709\u4F7F\u7528\u6CDB\u578B\uFF0C\u800C\u662F\u5C06\u53C2\u6570\u5177\u4F53\u7C7B\u578B\u5316\u4E86\uFF0C\u4E0D\u77E5\u9053Consumer\u6CA1\u5173\u7CFB\uFF0C\u4E0B\u9762\u4F1A\u4ECB\u7ECD\u5230\uFF0C\u5176\u5B9Ejava8\u4E2D\u63D0\u4F9B\u4E86\u5F88\u591A\u5E38\u7528\u7684\u51FD\u6570\u5F0F\u63A5\u53E3\uFF0CConsumer\u5C31\u662F\u5176\u4E2D\u4E4B\u4E00\uFF0C\u4E00\u822C\u60C5\u51B5\u4E0B\u90FD\u4E0D\u9700\u8981\u81EA\u5DF1\u5B9A\u4E49\uFF0C\u76F4\u63A5\u4F7F\u7528\u5C31\u597D\u4E86\u3002\u90A3\u4E48\u600E\u4E48\u4F7F\u7528\u8FD9\u4E2A\u81EA\u5B9A\u4E49\u7684\u51FD\u6570\u5F0F\u63A5\u53E3\u5462\uFF1F\u6211\u4EEC\u53EF\u4EE5\u7528\u51FD\u6570\u5F0F\u63A5\u53E3\u4F5C\u4E3A\u53C2\u6570\uFF0C\u8C03\u7528\u65F6\u4F20\u9012Lambda\u8868\u8FBE\u5F0F\u3002\u5982\u679C\u4E00\u4E2A\u65B9\u6CD5\u7684\u53C2\u6570\u662FLambda\uFF0C\u90A3\u4E48\u8FD9\u4E2A\u53C2\u6570\u7684\u7C7B\u578B\u4E00\u5B9A\u662F\u51FD\u6570\u5F0F\u63A5\u53E3\u3002\u4F8B\u5982\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFunctionTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">&quot;\u8BD5\u8BD5\u81EA\u5B9A\u4E49\u51FD\u6570\u597D\u4F7F\u4E0D&quot;</span><span class="token punctuation">;</span>
        <span class="token function">printString</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printString</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">MyFunction</span> myFunction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        myFunction<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u6267\u884C\u4EE5\u540E\u5C31\u4F1A\u8F93\u51FA\u201C\u8BD5\u8BD5\u81EA\u5B9A\u4E49\u51FD\u6570\u597D\u4F7F\u4E0D\u201D\u8FD9\u53E5\u8BDD\uFF0C\u5982\u679C\u67D0\u5929\u9700\u6C42\u53D8\u4E86\uFF0C\u6211\u4E0D\u60F3\u8F93\u51FA\u8FD9\u53E5\u8BDD\u4E86\uFF0C\u60F3\u8F93\u51FA\u522B\u7684\uFF0C\u90A3\u4E48\u76F4\u63A5\u66FF\u6362text\u5C31\u597D\u4E86\u3002<strong>\u51FD\u6570\u5F0F\u7F16\u7A0B\u662F\u6CA1\u6709\u526F\u4F5C\u7528\u7684\uFF0C\u6700\u5927\u7684\u597D\u5904\u5C31\u662F\u51FD\u6570\u7684\u5185\u90E8\u662F\u65E0\u72B6\u6001\u7684\uFF0C\u65E2\u8F93\u5165\u786E\u5B9A\u8F93\u51FA\u5C31\u786E\u5B9A</strong>\u3002\u51FD\u6570\u5F0F\u7F16\u7A0B\u8FD8\u6709\u66F4\u591A\u597D\u73A9\u7684\u5957\u8DEF\uFF0C\u8FD9\u5C31\u9700\u8981\u9760\u5927\u5BB6\u81EA\u5DF1\u63A2\u7D22\u4E86\u3002</p><h3 id="function-\u51FD\u6570\u6620\u5C04" tabindex="-1"><a class="header-anchor" href="#function-\u51FD\u6570\u6620\u5C04" aria-hidden="true">#</a> Function \u51FD\u6570\u6620\u5C04</h3><p><strong>\u62BD\u8C61\u65B9\u6CD5\uFF1A</strong> R apply(T t)\uFF0C\u4F20\u5165\u4E00\u4E2A\u53C2\u6570\uFF0C\u8FD4\u56DE\u60F3\u8981\u7684\u7ED3\u679C\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">R</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Function\u63A5\u53E3\u63A5\u53D7\u4E00\u4E2A\u53C2\u6570\u5E76\u8FD4\u56DE\u7ED3\u679C\u3002\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528andThen\u65B9\u6CD5\u6765\u5C06\u591A\u4E2A\u51FD\u6570\u4E32\u8054\u8D77\u6765\uFF0C\u8FDB\u884C\u7EC4\u5408\u64CD\u4F5C\u3002\u793A\u4F8B\u4EE3\u7801\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> intToString <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token operator">::</span><span class="token function">toString</span><span class="token punctuation">;</span>
<span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> quote <span class="token operator">=</span> s <span class="token operator">-&gt;</span> <span class="token string">&quot;&#39;&quot;</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> quoteIntToString <span class="token operator">=</span> intToString<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>quote<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> result <span class="token operator">=</span> quoteIntToString<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>\u9ED8\u8BA4\u65B9\u6CD5\uFF1A</strong></p><ul><li><code>compose(Function before)</code>\uFF0C\u5148\u6267\u884Ccompose\u65B9\u6CD5\u53C2\u6570before\u4E2D\u7684apply\u65B9\u6CD5\uFF0C\u7136\u540E\u5C06\u6267\u884C\u7ED3\u679C\u4F20\u9012\u7ED9\u8C03\u7528compose\u51FD\u6570\u4E2D\u7684apply\u65B9\u6CD5\u5728\u6267\u884C\u3002 <strong>\u4F7F\u7528\u65B9\u5F0F\uFF1A</strong></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> function1 <span class="token operator">=</span> e <span class="token operator">-&gt;</span> e <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
 <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> function2 <span class="token operator">=</span> e <span class="token operator">-&gt;</span> e <span class="token operator">*</span> e<span class="token punctuation">;</span>

 <span class="token class-name">Integer</span> apply2 <span class="token operator">=</span> function1<span class="token punctuation">.</span><span class="token function">compose</span><span class="token punctuation">(</span>function2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>apply2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u8FD8\u662F\u4E3E\u4E00\u4E2A\u4E58\u6CD5\u7684\u4F8B\u5B50\uFF0Ccompose\u65B9\u6CD5\u6267\u884C\u6D41\u7A0B\u662F\u5148\u6267\u884Cfunction2\u7684\u8868\u8FBE\u5F0F\u4E5F\u5C31\u662F3<em>3=9\uFF0C\u7136\u540E\u5728\u5C06\u6267\u884C\u7ED3\u679C\u4F20\u7ED9function1\u7684\u8868\u8FBE\u5F0F\u4E5F\u5C31\u662F9</em>2=18\uFF0C\u6240\u4EE5\u6700\u7EC8\u7684\u7ED3\u679C\u662F18\u3002</p><ul><li><code>andThen(Function after)</code>\uFF0C\u5148\u6267\u884C\u8C03\u7528andThen\u51FD\u6570\u7684apply\u65B9\u6CD5\uFF0C\u7136\u540E\u5728\u5C06\u6267\u884C\u7ED3\u679C\u4F20\u9012\u7ED9andThen\u65B9\u6CD5after\u53C2\u6570\u4E2D\u7684apply\u65B9\u6CD5\u5728\u6267\u884C\u3002\u5B83\u548Ccompose\u65B9\u6CD5\u6574\u597D\u662F\u76F8\u53CD\u7684\u6267\u884C\u987A\u5E8F\u3002 <strong>\u4F7F\u7528\u65B9\u5F0F\uFF1A</strong></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> function1 <span class="token operator">=</span> e <span class="token operator">-&gt;</span> e <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
 <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> function2 <span class="token operator">=</span> e <span class="token operator">-&gt;</span> e <span class="token operator">*</span> e<span class="token punctuation">;</span>

 <span class="token class-name">Integer</span> apply3 <span class="token operator">=</span> function1<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>function2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>apply3<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u8FD9\u91CC\u6211\u4EEC\u548Ccompose\u65B9\u6CD5\u4F7F\u7528\u4E00\u4E2A\u4F8B\u5B50\uFF0C\u6240\u4EE5\u662F\u4E00\u6A21\u4E00\u6837\u7684\u4F8B\u5B50\uFF0C\u7531\u4E8E\u65B9\u6CD5\u7684\u4E0D\u540C\uFF0C\u6267\u884C\u987A\u5E8F\u4E5F\u5C31\u4E0D\u76F8\u540C\uFF0C\u90A3\u4E48\u7ED3\u679C\u662F\u5927\u5927\u4E0D\u540C\u7684\u3002andThen\u65B9\u6CD5\u662F\u5148\u6267\u884Cfunction1\u8868\u8FBE\u5F0F\uFF0C\u4E5F\u5C31\u662F3<em>2=6\uFF0C\u7136\u540E\u5728\u6267\u884Cfunction2\u8868\u8FBE\u5F0F\u4E5F\u5C31\u662F6</em>6=36\u3002\u7ED3\u679C\u5C31\u662F36\u3002</p><p>**\u9759\u6001\u65B9\u6CD5\uFF1A**identity()\uFF0C\u83B7\u53D6\u4E00\u4E2A\u8F93\u5165\u53C2\u6570\u548C\u8FD4\u56DE\u7ED3\u679C\u76F8\u540C\u7684Function\u5B9E\u4F8B\u3002</p><p><strong>\u4F7F\u7528\u65B9\u5F0F\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> Function&lt;Integer, Integer&gt; identity = Function.identity();
 Integer apply = identity.apply(3);
 System.out.println(apply);
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u5E73\u5E38\u6CA1\u6709\u9047\u5230\u8FC7\u4F7F\u7528\u8FD9\u4E2A\u65B9\u6CD5\u7684\u573A\u666F\uFF0C\u603B\u4E4B\u8FD9\u4E2A\u65B9\u6CD5\u7684\u4F5C\u7528\u5C31\u662F\u8F93\u5165\u4EC0\u4E48\u8FD4\u56DE\u7ED3\u679C\u5C31\u662F\u4EC0\u4E48\u3002</p><h4 id="\u6E90\u7801" tabindex="-1"><a class="header-anchor" href="#\u6E90\u7801" aria-hidden="true">#</a> \u6E90\u7801</h4><details class="custom-container details"><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">/*
 * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the &quot;Classpath&quot; exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */</span>
<span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Represents a function that accepts one argument and produces a result.
 *
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is a <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>package-summary.html<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>functional interface<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
 * whose functional method is <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>.
 *
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> the type of the input to the function
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>R<span class="token punctuation">&gt;</span></span> the type of the result of the function
 *
 * <span class="token keyword">@since</span> 1.8
 */</span>
<span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Applies this function to the given argument.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">t</span> the function argument
     * <span class="token keyword">@return</span> the function result
     */</span>
    <span class="token class-name">R</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Returns a composed function that first applies the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">before</span></span><span class="token punctuation">}</span>
     * function to its input, and then applies this function to the result.
     * If evaluation of either function throws an exception, it is relayed to
     * the caller of the composed function.
     *
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>V<span class="token punctuation">&gt;</span></span> the type of input to the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">before</span></span><span class="token punctuation">}</span> function, and to the
     *           composed function
     * <span class="token keyword">@param</span> <span class="token parameter">before</span> the function to apply before this function is applied
     * <span class="token keyword">@return</span> a composed function that first applies the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">before</span></span><span class="token punctuation">}</span>
     * function and then applies this function
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if before is null
     *
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">andThen</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">)</span></span>
     */</span>
    <span class="token keyword">default</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> before<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>before<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">V</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">apply</span><span class="token punctuation">(</span>before<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Returns a composed function that first applies this function to
     * its input, and then applies the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">after</span></span><span class="token punctuation">}</span> function to the result.
     * If evaluation of either function throws an exception, it is relayed to
     * the caller of the composed function.
     *
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>V<span class="token punctuation">&gt;</span></span> the type of output of the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">after</span></span><span class="token punctuation">}</span> function, and of the
     *           composed function
     * <span class="token keyword">@param</span> <span class="token parameter">after</span> the function to apply after this function is applied
     * <span class="token keyword">@return</span> a composed function that first applies this function and then
     * applies the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">after</span></span><span class="token punctuation">}</span> function
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if after is null
     *
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">compose</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">)</span></span>
     */</span>
    <span class="token keyword">default</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">andThen</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> after<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>after<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> after<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token function">apply</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Returns a function that always returns its input argument.
     *
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> the type of the input and output objects to the function
     * <span class="token keyword">@return</span> a function that always returns its input argument
     */</span>
    <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> t <span class="token operator">-&gt;</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br></div></div></details><h3 id="consumer-\u6D88\u8D39\u578B\u63A5\u53E3" tabindex="-1"><a class="header-anchor" href="#consumer-\u6D88\u8D39\u578B\u63A5\u53E3" aria-hidden="true">#</a> Consumer \u6D88\u8D39\u578B\u63A5\u53E3</h3><p><strong>\u62BD\u8C61\u65B9\u6CD5\uFF1A</strong> void accept(T t)\uFF0C\u63A5\u6536\u4E00\u4E2A\u53C2\u6570\u8FDB\u884C\u6D88\u8D39\uFF0C\u4F46\u65E0\u9700\u8FD4\u56DE\u7ED3\u679C\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Consumer\u63A5\u53E3\u63A5\u53D7\u4E00\u4E2A\u53C2\u6570\uFF0C\u4F46\u6CA1\u6709\u8FD4\u56DE\u503C\u3002\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528andThen\u65B9\u6CD5\u6765\u5C06\u591A\u4E2AConsumer\u7EC4\u5408\u8D77\u6765\uFF0C\u8FDB\u884C\u94FE\u5F0F\u64CD\u4F5C\u3002\u793A\u4F8B\u4EE3\u7801\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> print <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">;</span>
<span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> println <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">;</span>

list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>print<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="\u6E90\u7801-1" tabindex="-1"><a class="header-anchor" href="#\u6E90\u7801-1" aria-hidden="true">#</a> \u6E90\u7801</h4><details class="custom-container details"><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Performs this operation on the given argument.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">t</span> the input argument
     */</span>
    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Returns a composed <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Consumer</span></span></span><span class="token punctuation">}</span> that performs, in sequence, this
     * operation followed by the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">after</span></span><span class="token punctuation">}</span> operation. If performing either
     * operation throws an exception, it is relayed to the caller of the
     * composed operation.  If performing this operation throws an exception,
     * the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">after</span></span><span class="token punctuation">}</span> operation will not be performed.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">after</span> the operation to perform after this operation
     * <span class="token keyword">@return</span> a composed <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Consumer</span></span></span><span class="token punctuation">}</span> that performs in sequence this
     * operation followed by the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">after</span></span><span class="token punctuation">}</span> operation
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">after</span></span><span class="token punctuation">}</span> is null
     */</span>
    <span class="token keyword">default</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">andThen</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> after<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>after<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> <span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> after<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div></details><h3 id="predicate-\u65AD\u8A00\u578B\u63A5\u53E3" tabindex="-1"><a class="header-anchor" href="#predicate-\u65AD\u8A00\u578B\u63A5\u53E3" aria-hidden="true">#</a> Predicate \u65AD\u8A00\u578B\u63A5\u53E3</h3><p><strong>\u62BD\u8C61\u65B9\u6CD5\uFF1A</strong> boolean test(T t),\u4F20\u5165\u4E00\u4E2A\u53C2\u6570\uFF0C\u8FD4\u56DE\u4E00\u4E2A\u5E03\u5C14\u503C\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Predicate\u63A5\u53E3\u63A5\u53D7\u4E00\u4E2A\u53C2\u6570\uFF0C\u8FD4\u56DE\u4E00\u4E2A\u5E03\u5C14\u503C\u3002\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528and\u3001or\u3001negate\u65B9\u6CD5\u5C06\u591A\u4E2APredicate\u7EC4\u5408\u8D77\u6765\uFF0C\u8FDB\u884C\u590D\u5408\u903B\u8F91\u7684\u5224\u65AD\u3002\u793A\u4F8B\u4EE3\u7801\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;cat&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dog&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bird&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lion&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tiger&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> startsWithC <span class="token operator">=</span> s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> endsWithR <span class="token operator">=</span> s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> containsO <span class="token operator">=</span> s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;o&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>startsWithC<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>endsWithR<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>containsO<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="\u6E90\u7801-2" tabindex="-1"><a class="header-anchor" href="#\u6E90\u7801-2" aria-hidden="true">#</a> \u6E90\u7801</h4><details class="custom-container details"><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">/*
 * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the &quot;Classpath&quot; exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */</span>
<span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Represents a predicate (boolean-valued function) of one argument.
 *
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is a <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>package-summary.html<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>functional interface<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
 * whose functional method is <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>.
 *
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> the type of the input to the predicate
 *
 * <span class="token keyword">@since</span> 1.8
 */</span>
<span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Evaluates this predicate on the given argument.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">t</span> the input argument
     * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if the input argument matches the predicate,
     * otherwise <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Returns a composed predicate that represents a short-circuiting logical
     * AND of this predicate and another.  When evaluating the composed
     * predicate, if this predicate is <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span>, then the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">other</span></span><span class="token punctuation">}</span>
     * predicate is not evaluated.
     *
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Any exceptions thrown during evaluation of either predicate are relayed
     * to the caller; if evaluation of this predicate throws an exception, the
     * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">other</span></span><span class="token punctuation">}</span> predicate will not be evaluated.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">other</span> a predicate that will be logically-ANDed with this
     *              predicate
     * <span class="token keyword">@return</span> a composed predicate that represents the short-circuiting logical
     * AND of this predicate and the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">other</span></span><span class="token punctuation">}</span> predicate
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if other is null
     */</span>
    <span class="token keyword">default</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> other<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Returns a predicate that represents the logical negation of this
     * predicate.
     *
     * <span class="token keyword">@return</span> a predicate that represents the logical negation of this
     * predicate
     */</span>
    <span class="token keyword">default</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token operator">!</span><span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Returns a composed predicate that represents a short-circuiting logical
     * OR of this predicate and another.  When evaluating the composed
     * predicate, if this predicate is <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span>, then the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">other</span></span><span class="token punctuation">}</span>
     * predicate is not evaluated.
     *
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Any exceptions thrown during evaluation of either predicate are relayed
     * to the caller; if evaluation of this predicate throws an exception, the
     * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">other</span></span><span class="token punctuation">}</span> predicate will not be evaluated.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">other</span> a predicate that will be logically-ORed with this
     *              predicate
     * <span class="token keyword">@return</span> a composed predicate that represents the short-circuiting logical
     * OR of this predicate and the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">other</span></span><span class="token punctuation">}</span> predicate
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if other is null
     */</span>
    <span class="token keyword">default</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">or</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">||</span> other<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Returns a predicate that tests if two arguments are equal according
     * to <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Objects</span><span class="token punctuation">#</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>.
     *
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> the type of arguments to the predicate
     * <span class="token keyword">@param</span> <span class="token parameter">targetRef</span> the object reference with which to compare for equality,
     *               which may be <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span>
     * <span class="token keyword">@return</span> a predicate that tests if two arguments are equal according
     * to <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Objects</span><span class="token punctuation">#</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token class-name">Object</span> targetRef<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> targetRef<span class="token punctuation">)</span>
                <span class="token operator">?</span> <span class="token class-name">Objects</span><span class="token operator">::</span><span class="token function">isNull</span>
                <span class="token operator">:</span> object <span class="token operator">-&gt;</span> targetRef<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br></div></div></details><h3 id="supplier-\u4F9B\u7ED9\u578B\u63A5\u53E3" tabindex="-1"><a class="header-anchor" href="#supplier-\u4F9B\u7ED9\u578B\u63A5\u53E3" aria-hidden="true">#</a> Supplier \u4F9B\u7ED9\u578B\u63A5\u53E3</h3><p>**\u62BD\u8C61\u65B9\u6CD5\uFF1A**T get()\uFF0C\u65E0\u53C2\u6570\uFF0C\u6709\u8FD4\u56DE\u503C\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Supplier\u63A5\u53E3\u4E0D\u63A5\u53D7\u4EFB\u4F55\u53C2\u6570\uFF0C\u8FD4\u56DE\u4E00\u4E2A\u7ED3\u679C\u3002\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528get\u65B9\u6CD5\u6765\u83B7\u53D6\u7ED3\u679C\u3002\u793A\u4F8B\u4EE3\u7801\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> helloSupplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>helloSupplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="\u6E90\u7801-3" tabindex="-1"><a class="header-anchor" href="#\u6E90\u7801-3" aria-hidden="true">#</a> \u6E90\u7801</h4><details class="custom-container details"><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">/*
 * Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the &quot;Classpath&quot; exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */</span>
<span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Represents a supplier of results.
 *
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>There is no requirement that a new or distinct result be returned each
 * time the supplier is invoked.
 *
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is a <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>package-summary.html<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>functional interface<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
 * whose functional method is <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>.
 *
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> the type of results supplied by this supplier
 *
 * <span class="token keyword">@since</span> 1.8
 */</span>
<span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Gets a result.
     *
     * <span class="token keyword">@return</span> a result
     */</span>
    <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div></details><h2 id="\u65B9\u6CD5\u5F15\u7528" tabindex="-1"><a class="header-anchor" href="#\u65B9\u6CD5\u5F15\u7528" aria-hidden="true">#</a> \u65B9\u6CD5\u5F15\u7528</h2><p>\u65B9\u6CD5\u5F15\u7528\u662F\u4E00\u79CD\u66F4\u7B80\u6D01\u7684Lambda\u8868\u8FBE\u5F0F\uFF0C\u53EF\u4EE5\u901A\u8FC7\u65B9\u6CD5\u540D\u79F0\u6765\u5F15\u7528\u5DF2\u7ECF\u5B58\u5728\u7684\u65B9\u6CD5\u3002\u65B9\u6CD5\u5F15\u7528\u901A\u8FC7 <code>::</code> \u64CD\u4F5C\u7B26\u5C06\u65B9\u6CD5\u540D\u4E0E\u5BF9\u8C61\u6216\u7C7B\u540D\u5206\u9694\u5F00\u6765\u8868\u793A\u3002</p><p>\u4E0B\u9762\u662F\u4E00\u4E9B\u65B9\u6CD5\u5F15\u7528\u7684\u4F8B\u5B50\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> strToInt <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">parseInt</span><span class="token punctuation">;</span>
<span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Date</span><span class="token punctuation">&gt;</span></span> newDate <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>
<span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> print <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="\u5176\u4ED6\u51FD\u6570\u5F0F\u63A5\u53E3" tabindex="-1"><a class="header-anchor" href="#\u5176\u4ED6\u51FD\u6570\u5F0F\u63A5\u53E3" aria-hidden="true">#</a> \u5176\u4ED6\u51FD\u6570\u5F0F\u63A5\u53E3</h2><h3 id="bi\u7C7B\u578B\u63A5\u53E3" tabindex="-1"><a class="header-anchor" href="#bi\u7C7B\u578B\u63A5\u53E3" aria-hidden="true">#</a> Bi\u7C7B\u578B\u63A5\u53E3</h3><p><code>BiConsumer\u3001BiFunction\u3001BiPrediate</code> \u662F <code>Consumer\u3001Function\u3001Predicate </code>\u7684\u6269\u5C55\uFF0C\u53EF\u4EE5\u4F20\u5165\u591A\u4E2A\u53C2\u6570\uFF0C\u6CA1\u6709 BiSupplier \u662F\u56E0\u4E3A Supplier \u6CA1\u6709\u5165\u53C2\u3002</p><h3 id="\u64CD\u4F5C\u57FA\u672C\u6570\u636E\u7C7B\u578B\u7684\u63A5\u53E3" tabindex="-1"><a class="header-anchor" href="#\u64CD\u4F5C\u57FA\u672C\u6570\u636E\u7C7B\u578B\u7684\u63A5\u53E3" aria-hidden="true">#</a> \u64CD\u4F5C\u57FA\u672C\u6570\u636E\u7C7B\u578B\u7684\u63A5\u53E3</h3><p><code>IntConsumer\u3001IntFunction\u3001IntPredicate\u3001IntSupplier\u3001LongConsumer\u3001LongFunction\u3001LongPredicate\u3001LongSupplier\u3001DoubleConsumer\u3001DoubleFunction\u3001DoublePredicate\u3001DoubleSupplier</code>\u3002\u5176\u5B9E\u5E38\u7528\u7684\u51FD\u6570\u5F0F\u63A5\u53E3\u5C31\u90A3\u56DB\u5927\u63A5\u53E3Consumer\u3001Function\u3001Prediate\u3001Supplier\uFF0C\u5176\u4ED6\u7684\u51FD\u6570\u5F0F\u63A5\u53E3\u5C31\u4E0D\u4E00\u4E00\u5217\u4E3E\u4E86\uFF0C\u6709\u5174\u8DA3\u7684\u53EF\u4EE5\u53BBjava.util.function\u8FD9\u4E2A\u5305\u4E0B\u8BE6\u7EC6\u7684\u770B\u3002</p><h2 id="\u603B\u7ED3" tabindex="-1"><a class="header-anchor" href="#\u603B\u7ED3" aria-hidden="true">#</a> \u603B\u7ED3</h2><p>\u5728\u672C\u7BC7\u6587\u7AE0\u4E2D\uFF0C\u6211\u4EEC\u4ECB\u7ECD\u4E86Java\u51FD\u6570\u5F0F\u7F16\u7A0B\u4EE5\u53CA\u5E38\u7528\u7684\u51FD\u6570\u5F0F\u63A5\u53E3\u3002Lambda\u8868\u8FBE\u5F0F\u548C\u51FD\u6570\u5F0F\u63A5\u53E3\u662F\u51FD\u6570\u5F0F\u7F16\u7A0B\u7684\u4E24\u4E2A\u91CD\u8981\u6982\u5FF5\uFF0C\u53EF\u4EE5\u8BA9\u4EE3\u7801\u66F4\u52A0\u7B80\u6D01\u548C\u7075\u6D3B\u3002Java\u63D0\u4F9B\u4E86\u4E00\u4E9B\u5E38\u7528\u7684\u51FD\u6570\u5F0F\u63A5\u53E3\uFF0C\u5982Function\u3001Consumer\u3001Predicate\u3001Supplier\u7B49\uFF0C\u53EF\u4EE5\u901A\u8FC7\u65B9\u6CD5\u5F15\u7528\u66F4\u52A0\u7B80\u6D01\u5730\u5B9E\u73B0\u51FD\u6570\u5F0F\u7F16\u7A0B\u3002\u4F7F\u7528\u51FD\u6570\u5F0F\u7F16\u7A0B\uFF0C\u53EF\u4EE5\u8BA9\u4F60\u7684\u4EE3\u7801\u66F4\u52A0\u4F18\u96C5\uFF0C\u7B80\u6D01\u3002</p>`,65);function e(t,c){return p}var l=n(a,[["render",e],["__file","java-functionalProgram.html.vue"]]);export{l as default};
