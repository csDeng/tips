import{_ as n,e as s}from"./app.2a7ffa2e.js";const a={},p=s(`<h1 id="\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#\u5B57\u7B26\u4E32" aria-hidden="true">#</a> \u5B57\u7B26\u4E32</h1><h2 id="_1-\u53CD\u8F6C\u5B57\u7B26\u4E32-e" tabindex="-1"><a class="header-anchor" href="#_1-\u53CD\u8F6C\u5B57\u7B26\u4E32-e" aria-hidden="true">#</a> 1. \u53CD\u8F6C\u5B57\u7B26\u4E32 E</h2><details class="custom-container details"><blockquote><p>\u7F16\u5199\u4E00\u4E2A\u51FD\u6570\uFF0C\u5176\u4F5C\u7528\u662F\u5C06\u8F93\u5165\u7684\u5B57\u7B26\u4E32\u53CD\u8F6C\u8FC7\u6765\u3002\u8F93\u5165\u5B57\u7B26\u4E32\u4EE5\u5B57\u7B26\u6570\u7EC4 s \u7684\u5F62\u5F0F\u7ED9\u51FA\u3002</p><p>\u4E0D\u8981\u7ED9\u53E6\u5916\u7684\u6570\u7EC4\u5206\u914D\u989D\u5916\u7684\u7A7A\u95F4\uFF0C\u4F60\u5FC5\u987B\u539F\u5730\u4FEE\u6539\u8F93\u5165\u6570\u7EC4\u3001\u4F7F\u7528 O(1) \u7684\u989D\u5916\u7A7A\u95F4\u89E3\u51B3\u8FD9\u4E00\u95EE\u9898\u3002</p><p>\u793A\u4F8B 1\uFF1A</p><p>\u8F93\u5165\uFF1As = [&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;] \u8F93\u51FA\uFF1A[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;] \u793A\u4F8B 2\uFF1A</p><p>\u8F93\u5165\uFF1As = [&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;] \u8F93\u51FA\uFF1A[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</p><p>\u63D0\u793A\uFF1A</p><p>1 &lt;= s.length &lt;= 105 s[i] \u90FD\u662F ASCII \u7801\u8868\u4E2D\u7684\u53EF\u6253\u5370\u5B57\u7B26</p><p>\u6765\u6E90\uFF1A\u529B\u6263\uFF08LeetCode\uFF09 \u94FE\u63A5\uFF1Ahttps://leetcode.cn/problems/reverse-string \u8457\u4F5C\u6743\u5F52\u9886\u6263\u7F51\u7EDC\u6240\u6709\u3002\u5546\u4E1A\u8F6C\u8F7D\u8BF7\u8054\u7CFB\u5B98\u65B9\u6388\u6743\uFF0C\u975E\u5546\u4E1A\u8F6C\u8F7D\u8BF7\u6CE8\u660E\u51FA\u5904\u3002</p></blockquote><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">reverseString</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
    n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
    <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> 
    <span class="token punctuation">}</span>
    l<span class="token punctuation">,</span>r <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span>
    <span class="token keyword">for</span> l <span class="token operator">&lt;=</span> r <span class="token punctuation">{</span>
        s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span>
        l<span class="token operator">++</span>
        r<span class="token operator">--</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></details><h2 id="_2-\u53CD\u8F6C\u5B57\u7B26\u4E322-e" tabindex="-1"><a class="header-anchor" href="#_2-\u53CD\u8F6C\u5B57\u7B26\u4E322-e" aria-hidden="true">#</a> 2. \u53CD\u8F6C\u5B57\u7B26\u4E322 E</h2><details class="custom-container details"><blockquote><p>\u7ED9\u5B9A\u4E00\u4E2A\u5B57\u7B26\u4E32 s \u548C\u4E00\u4E2A\u6574\u6570 k\uFF0C\u4ECE\u5B57\u7B26\u4E32\u5F00\u5934\u7B97\u8D77\uFF0C\u6BCF\u8BA1\u6570\u81F3 2k \u4E2A\u5B57\u7B26\uFF0C\u5C31\u53CD\u8F6C\u8FD9 2k \u5B57\u7B26\u4E2D\u7684\u524D k \u4E2A\u5B57\u7B26\u3002</p><p>\u5982\u679C\u5269\u4F59\u5B57\u7B26\u5C11\u4E8E k \u4E2A\uFF0C\u5219\u5C06\u5269\u4F59\u5B57\u7B26\u5168\u90E8\u53CD\u8F6C\u3002 \u5982\u679C\u5269\u4F59\u5B57\u7B26\u5C0F\u4E8E 2k \u4F46\u5927\u4E8E\u6216\u7B49\u4E8E k \u4E2A\uFF0C\u5219\u53CD\u8F6C\u524D k \u4E2A\u5B57\u7B26\uFF0C\u5176\u4F59\u5B57\u7B26\u4FDD\u6301\u539F\u6837\u3002</p><p>\u793A\u4F8B 1\uFF1A</p><p>\u8F93\u5165\uFF1As = &quot;abcdefg&quot;, k = 2 \u8F93\u51FA\uFF1A&quot;bacdfeg&quot; \u793A\u4F8B 2\uFF1A</p><p>\u8F93\u5165\uFF1As = &quot;abcd&quot;, k = 2 \u8F93\u51FA\uFF1A&quot;bacd&quot;</p><p>\u63D0\u793A\uFF1A</p><p>1 &lt;= s.length &lt;= 104 s \u4EC5\u7531\u5C0F\u5199\u82F1\u6587\u7EC4\u6210 1 &lt;= k &lt;= 104</p><p>\u6765\u6E90\uFF1A\u529B\u6263\uFF08LeetCode\uFF09 \u94FE\u63A5\uFF1Ahttps://leetcode.cn/problems/reverse-string-ii \u8457\u4F5C\u6743\u5F52\u9886\u6263\u7F51\u7EDC\u6240\u6709\u3002\u5546\u4E1A\u8F6C\u8F7D\u8BF7\u8054\u7CFB\u5B98\u65B9\u6388\u6743\uFF0C\u975E\u5546\u4E1A\u8F6C\u8F7D\u8BF7\u6CE8\u660E\u51FA\u5904\u3002</p></blockquote><blockquote><p>\u8FD9\u9053\u9898\u76EE\u5176\u5B9E\u4E5F\u662F\u6A21\u62DF\uFF0C\u5B9E\u73B0\u9898\u76EE\u4E2D\u89C4\u5B9A\u7684\u53CD\u8F6C\u89C4\u5219\u5C31\u53EF\u4EE5\u4E86\u3002</p><p>\u4E00\u4E9B\u540C\u5B66\u53EF\u80FD\u4E3A\u4E86\u5904\u7406\u903B\u8F91\uFF1A\u6BCF\u96942k\u4E2A\u5B57\u7B26\u7684\u524Dk\u7684\u5B57\u7B26\uFF0C\u5199\u4E86\u4E00\u5806\u903B\u8F91\u4EE3\u7801\u6216\u8005\u518D\u641E\u4E00\u4E2A\u8BA1\u6570\u5668\uFF0C\u6765\u7EDF\u8BA12k\uFF0C\u518D\u7EDF\u8BA1\u524Dk\u4E2A\u5B57\u7B26\u3002</p><p>\u5176\u5B9E\u5728\u904D\u5386\u5B57\u7B26\u4E32\u7684\u8FC7\u7A0B\u4E2D\uFF0C\u53EA\u8981\u8BA9 i += (2 * k)\uFF0Ci \u6BCF\u6B21\u79FB\u52A8 2 * k \u5C31\u53EF\u4EE5\u4E86\uFF0C\u7136\u540E\u5224\u65AD\u662F\u5426\u9700\u8981\u6709\u53CD\u8F6C\u7684\u533A\u95F4\u3002</p><p>\u56E0\u4E3A\u8981\u627E\u7684\u4E5F\u5C31\u662F\u6BCF2 * k \u533A\u95F4\u7684\u8D77\u70B9\uFF0C\u8FD9\u6837\u5199\uFF0C\u7A0B\u5E8F\u4F1A\u9AD8\u6548\u5F88\u591A\u3002</p><p><strong>\u6240\u4EE5\u5F53\u9700\u8981\u56FA\u5B9A\u89C4\u5F8B\u4E00\u6BB5\u4E00\u6BB5\u53BB\u5904\u7406\u5B57\u7B26\u4E32\u7684\u65F6\u5019\uFF0C\u8981\u60F3\u60F3\u5728\u5728for\u5FAA\u73AF\u7684\u8868\u8FBE\u5F0F\u4E0A\u505A\u505A\u6587\u7AE0\u3002</strong></p></blockquote><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">reverseStr</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> k <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	temp <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>
	<span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">||</span> k <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> s
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> k <span class="token punctuation">{</span>
		<span class="token keyword">if</span> i<span class="token operator">+</span>k <span class="token operator">&lt;=</span> n <span class="token punctuation">{</span>
			<span class="token function">reverse</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i <span class="token punctuation">:</span> i<span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token function">reverse</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">reverse</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	l<span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>
	<span class="token keyword">for</span> l <span class="token operator">&lt;</span> r <span class="token punctuation">{</span>
		s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span>
		l<span class="token operator">++</span>
		r<span class="token operator">--</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token string">&quot;abcdefghijklmn&quot;</span>
	k <span class="token operator">:=</span> <span class="token number">2</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">reverseStr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div></details><h2 id="_3-\u66FF\u6362\u7A7A\u683C-e" tabindex="-1"><a class="header-anchor" href="#_3-\u66FF\u6362\u7A7A\u683C-e" aria-hidden="true">#</a> 3. \u66FF\u6362\u7A7A\u683C E</h2><details class="custom-container details"><blockquote><p>\u8BF7\u5B9E\u73B0\u4E00\u4E2A\u51FD\u6570\uFF0C\u628A\u5B57\u7B26\u4E32 s \u4E2D\u7684\u6BCF\u4E2A\u7A7A\u683C\u66FF\u6362\u6210&quot;%20&quot;\u3002</p><p>\u793A\u4F8B 1\uFF1A</p><p>\u8F93\u5165\uFF1As = &quot;We are happy.&quot; \u8F93\u51FA\uFF1A&quot;We%20are%20happy.&quot;</p><p>\u9650\u5236\uFF1A</p><p>0 &lt;= s \u7684\u957F\u5EA6 &lt;= 10000</p><p>\u6765\u6E90\uFF1A\u529B\u6263\uFF08LeetCode\uFF09 \u94FE\u63A5\uFF1Ahttps://leetcode.cn/problems/ti-huan-kong-ge-lcof \u8457\u4F5C\u6743\u5F52\u9886\u6263\u7F51\u7EDC\u6240\u6709\u3002\u5546\u4E1A\u8F6C\u8F7D\u8BF7\u8054\u7CFB\u5B98\u65B9\u6388\u6743\uFF0C\u975E\u5546\u4E1A\u8F6C\u8F7D\u8BF7\u6CE8\u660E\u51FA\u5904\u3002</p></blockquote><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	temp <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	res <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39; &#39;</span> <span class="token punctuation">{</span>
			res <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token char">&#39;%&#39;</span><span class="token punctuation">)</span>
			res <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">)</span>
			res <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			res <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></details><h2 id="_4-\u98A0\u5012\u5B57\u7B26\u4E32\u91CC\u7684\u5355\u8BCD" tabindex="-1"><a class="header-anchor" href="#_4-\u98A0\u5012\u5B57\u7B26\u4E32\u91CC\u7684\u5355\u8BCD" aria-hidden="true">#</a> 4. \u98A0\u5012\u5B57\u7B26\u4E32\u91CC\u7684\u5355\u8BCD</h2><details class="custom-container details"><blockquote><p>\u7ED9\u4F60\u4E00\u4E2A\u5B57\u7B26\u4E32 s \uFF0C\u98A0\u5012\u5B57\u7B26\u4E32\u4E2D \u5355\u8BCD \u7684\u987A\u5E8F\u3002</p><p>\u5355\u8BCD \u662F\u7531\u975E\u7A7A\u683C\u5B57\u7B26\u7EC4\u6210\u7684\u5B57\u7B26\u4E32\u3002s \u4E2D\u4F7F\u7528\u81F3\u5C11\u4E00\u4E2A\u7A7A\u683C\u5C06\u5B57\u7B26\u4E32\u4E2D\u7684 \u5355\u8BCD \u5206\u9694\u5F00\u3002</p><p>\u8FD4\u56DE \u5355\u8BCD \u987A\u5E8F\u98A0\u5012\u4E14 \u5355\u8BCD \u4E4B\u95F4\u7528\u5355\u4E2A\u7A7A\u683C\u8FDE\u63A5\u7684\u7ED3\u679C\u5B57\u7B26\u4E32\u3002</p><p>\u6CE8\u610F\uFF1A\u8F93\u5165\u5B57\u7B26\u4E32 s\u4E2D\u53EF\u80FD\u4F1A\u5B58\u5728\u524D\u5BFC\u7A7A\u683C\u3001\u5C3E\u968F\u7A7A\u683C\u6216\u8005\u5355\u8BCD\u95F4\u7684\u591A\u4E2A\u7A7A\u683C\u3002\u8FD4\u56DE\u7684\u7ED3\u679C\u5B57\u7B26\u4E32\u4E2D\uFF0C\u5355\u8BCD\u95F4\u5E94\u5F53\u4EC5\u7528\u5355\u4E2A\u7A7A\u683C\u5206\u9694\uFF0C\u4E14\u4E0D\u5305\u542B\u4EFB\u4F55\u989D\u5916\u7684\u7A7A\u683C\u3002</p><p>\u793A\u4F8B 1\uFF1A</p><p>\u8F93\u5165\uFF1As = &quot;the sky is blue&quot; \u8F93\u51FA\uFF1A&quot;blue is sky the&quot; \u793A\u4F8B 2\uFF1A</p><p>\u8F93\u5165\uFF1As = &quot; hello world &quot; \u8F93\u51FA\uFF1A&quot;world hello&quot; \u89E3\u91CA\uFF1A\u98A0\u5012\u540E\u7684\u5B57\u7B26\u4E32\u4E2D\u4E0D\u80FD\u5B58\u5728\u524D\u5BFC\u7A7A\u683C\u548C\u5C3E\u968F\u7A7A\u683C\u3002 \u793A\u4F8B 3\uFF1A</p><p>\u8F93\u5165\uFF1As = &quot;a good example&quot; \u8F93\u51FA\uFF1A&quot;example good a&quot; \u89E3\u91CA\uFF1A\u5982\u679C\u4E24\u4E2A\u5355\u8BCD\u95F4\u6709\u591A\u4F59\u7684\u7A7A\u683C\uFF0C\u98A0\u5012\u540E\u7684\u5B57\u7B26\u4E32\u9700\u8981\u5C06\u5355\u8BCD\u95F4\u7684\u7A7A\u683C\u51CF\u5C11\u5230\u4EC5\u6709\u4E00\u4E2A\u3002</p><p>\u63D0\u793A\uFF1A</p><p>1 &lt;= s.length &lt;= 104 s \u5305\u542B\u82F1\u6587\u5927\u5C0F\u5199\u5B57\u6BCD\u3001\u6570\u5B57\u548C\u7A7A\u683C &#39; &#39; s \u4E2D \u81F3\u5C11\u5B58\u5728\u4E00\u4E2A \u5355\u8BCD</p><p>\u8FDB\u9636\uFF1A\u5982\u679C\u5B57\u7B26\u4E32\u5728\u4F60\u4F7F\u7528\u7684\u7F16\u7A0B\u8BED\u8A00\u4E2D\u662F\u4E00\u79CD\u53EF\u53D8\u6570\u636E\u7C7B\u578B\uFF0C\u8BF7\u5C1D\u8BD5\u4F7F\u7528 O(1) \u989D\u5916\u7A7A\u95F4\u590D\u6742\u5EA6\u7684 \u539F\u5730 \u89E3\u6CD5\u3002</p><p>\u6765\u6E90\uFF1A\u529B\u6263\uFF08LeetCode\uFF09 \u94FE\u63A5\uFF1Ahttps://leetcode.cn/problems/reverse-words-in-a-string \u8457\u4F5C\u6743\u5F52\u9886\u6263\u7F51\u7EDC\u6240\u6709\u3002\u5546\u4E1A\u8F6C\u8F7D\u8BF7\u8054\u7CFB\u5B98\u65B9\u6388\u6743\uFF0C\u975E\u5546\u4E1A\u8F6C\u8F7D\u8BF7\u6CE8\u660E\u51FA\u5904\u3002</p></blockquote><p>\u603B\u4F53\u601D\u8DEF\uFF1A</p><ul><li>\u5148\u53BB\u6389\u4E24\u7AEF\u7684\u7A7A\u683C</li><li>\u53CC\u6307\u9488\u4ECE\u540E\u5F80\u524D\uFF0C\u9047\u5230\u7A7A\u683C\u8BF4\u660E\u9047\u5230\u5355\u8BCD\uFF0C\u5355\u8BCD\u5165\u6808</li><li>\u5FEB\u6307\u9488\u5DE6\u79FB</li><li>\u6162\u6307\u9488=\u5FEB\u6307\u9488</li><li>\u5FAA\u73AF\u9012\u5F52</li></ul><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    s <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
    n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
    i<span class="token punctuation">,</span> j <span class="token operator">:=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span>
    res <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39; &#39;</span> <span class="token punctuation">{</span>
            j<span class="token operator">--</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// s[j] == &#39; &#39;</span>
        <span class="token comment">// \u5207\u7247\u5DE6\u95ED\u53F3\u5F00</span>
        <span class="token comment">// fmt.Println(s[j+1:i+1], len(s[j+1:i+1]))</span>
        res <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> s<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment">// \u5DE6\u79FB</span>
        <span class="token keyword">for</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39; &#39;</span> <span class="token punctuation">{</span>
            j<span class="token operator">--</span>
        <span class="token punctuation">}</span>
        i <span class="token operator">=</span> j
        j <span class="token operator">-=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div></details>`,9);function t(e,o){return p}var l=n(a,[["render",t],["__file","string.html.vue"]]);export{l as default};
